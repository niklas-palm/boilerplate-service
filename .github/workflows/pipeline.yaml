name: Pipeline

on:
  push:
    branches:
      - "main"
      - "feature**"
  delete:
    branches:
      - "feature**"

env:
  REGION: eu-west-1
  STAGING_PIPELINE_EXECUTION_ROLE: arn:aws:iam::882782905959:role/enpalm-staging-github-actions-role
  PROD_PIPELINE_EXECUTION_ROLE: arn:aws:iam::764305725019:role/enpalm-prod-github-actions-role

permissions:
  id-token: write
  contents: read
jobs:
  test:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          # trigger the tests here!

  delete-feature:
    if: startsWith(github.event.ref, 'feature') && github.event_name == 'delete'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Assume the staging pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ env.REGION }}
          role-to-assume: ${{ env.STAGING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: staging-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Delete feature branch stack
        env:
          SERVICE: ${{ github.event.ref }}
          ENVIRONMENT: dev
        run: |
          make delete

  build-and-deploy-feature:
    # this stage is triggered only for feature branches (feature*),
    # which will build the stack and deploy to a stack named with branch name.
    # https://github.com/actions/setup-python
    # https://github.com/aws-actions/configure-aws-credentials#notice-node12-deprecation-warning
    if: startsWith(github.ref, 'refs/heads/feature')
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - run: |
          make build

      - name: Assume the staging pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ env.REGION }}
          role-to-assume: ${{ env.STAGING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: feature-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Set feature branch env
        shell: bash
        run: echo "FEATURE_BRANCH_NAME=$(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-]')" >> $GITHUB_ENV

      - name: Deploy to feature stack in the staging account
        env:
          SERVICE: ${{ env.FEATURE_BRANCH_NAME }}
          ENVIRONMENT: dev
          TEMPLATE: template.yaml
        shell: bash
        run: |
          make deploy

  build-and-package:
    if: github.ref == 'refs/heads/main'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Build resources
        run: |
          make build

      - name: Assume the staging pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ env.REGION }}
          role-to-assume: ${{ env.STAGING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: staging-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to staging artifact buckets
        env:
          ENVIRONMENT: staging
        run: |
          make package

      - uses: actions/upload-artifact@v3
        with:
          name: packaged-staging.yaml
          path: packaged-staging.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ env.REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to production artifact buckets
        env:
          ENVIRONMENT: prod
        run: |
          make package

      - uses: actions/upload-artifact@v3
        with:
          name: packaged-prod.yaml
          path: packaged-prod.yaml

  deploy-staging:
    if: github.ref == 'refs/heads/main'
    needs: [build-and-package]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v3
        with:
          name: packaged-staging.yaml

      - name: Assume the staging pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ env.REGION }}
          role-to-assume: ${{ env.STAGING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: staging-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to staging account
        env:
          SERVICE: ${{github.event.repository.name}}
          ENVIRONMENT: staging
          TEMPLATE: packaged-staging.yaml
        run: |
          make deploy

  integration-test:
    if: github.ref == 'refs/heads/main'
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          # trigger the integration tests here

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: [integration-test]
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v3
        with:
          name: packaged-prod.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ env.REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to production account
        env:
          SERVICE: ${{github.event.repository.name}}
          ENVIRONMENT: prod
          TEMPLATE: packaged-prod.yaml
        run: |
          make deploy
